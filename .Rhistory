numberOfLegs <- c(4, 4, 0)
climbsTrees <- c(TRUE, FALSE, TRUE)
for (i in 1:3) {
if (numberOfLegs[i] == 4) {
if (climbsTrees[i]) print("cat") else print("dog")
} else print("snake")
}
# Print snake
print("snake")
# Loop through the vectors
for (i in 1:3) {
# If the number of legs is 4
if (numberOfLegs[i] == 4) {
# If the animal climbs trees
if (climbsTrees[i])
# Print cat
print("cat")
# Else
else
# Print dog
print("dog")
}
# Else
else
# Print snake
print("snake")
}
#Load the required packages
library(dplyr)
library(ggplot2)
# Set working environment
setwd("C:/Users/ben/Downloads/Week-1-R")
#Load the required packages
library(dplyr)
library(ggplot2)
#Load the titanic dataset
titanic_data <- read.csv("titanic.csv")
#View the dataset
head(titanic_data)
#Exploring the dataset
summary(titanic_data)
#Exploring the survival outcome
table(titanic_data$Survived)
#Exploring the survival rate by gender
table(titanic_data$Sex, titanic_data$Survived)
#Visualizing the survival rate by gender
ggplot(data = titanic_data, aes(x = Sex, fill = factor(Survived))) +
geom_bar(position = "dodge") +
labs(title = "Survival Rate by Gender", x = "Gender", y = "Number of Passengers")
#Exploring the survival rate by age
table(titanic_data$Age, titanic_data$Survived)
#Visualizing the survival rate by age
ggplot(data = titanic_data, aes(x = Age, fill = factor(Survived))) +
geom_histogram(position = "dodge") +
labs(title = "Survival Rate by Age", x = "Age", y = "Number of Passengers")
#Exploring the survival rate by class
table(titanic_data$Pclass, titanic_data$Survived)
#Visualizing the survival rate by class
ggplot(data = titanic_data, aes(x = Pclass, fill = factor(Survived))) +
geom_bar(position = "dodge") +
labs(title = "Survival Rate by Class", x = "Class", y = "Number of Passengers")
#Exploring the survival rate by fare
table(titanic_data$Fare, titanic_data$Survived)
#Visualizing the survival rate by fare
ggplot(data = titanic_data, aes(x = Fare, fill = factor(Survived))) +
geom_histogram(position = "dodge") +
labs(title = "Survival Rate by Fare", x = "Fare", y = "Number of Passengers")
install.packages("knitr")
library(knitr)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
knitr::knit("filename.Rmd")
# install.packages("knitr")
library(knitr)
# install.packages("tinytex")
# tinytex::install_tinytex()
#Visualizing the survival rate by fare
ggplot(data = titanic_data, aes(x = Fare, fill = factor(Survived))) +
geom_histogram(position = "dodge") +
labs(title = "Survival Rate by Fare", x = "Fare", y = "Number of Passengers")
#Load the required packages
library(dplyr)
library(ggplot2)
#Load the titanic dataset
titanic_data <- read.csv("titanic.csv")
#View the dataset
head(titanic_data)
#Visualizing the survival rate by fare
ggplot(data = titanic_data, aes(x = Fare, fill = factor(Survived))) +
geom_histogram(position = "dodge") +
labs(title = "Survival Rate by Fare", x = "Fare", y = "Number of Passengers")
# Plotting the titanic data
ggplot(data = titanic_data,  # data to be plotted
aes(x = Fare, # column on the x-axis
fill = factor(Survived))) # column to set the fill color
+ geom_histogram(position = "dodge") # setting the position of histogram
# Creates a table for the variables Fare and Survived from the titanic_data dataset
table(titanic_data$Fare, titanic_data$Survived)
# Plots a ggplot of the titanic_data dataframe
ggplot(data = titanic_data, aes(x = Pclass, fill = factor(Survived))) +
# Adds a bar chart of position "dodge"
geom_bar(position = "dodge") +
# Labels the title, x-axis, and y-axis
labs(title = "Survival Rate by Class", x = "Class", y = "Number of Passengers")
# Creates a ggplot object, using the titanic_data data frame, with 'Age' as the x-axis and 'Survived' as the fill color
ggplot(data = titanic_data, aes(x = Age, fill = factor(Survived))) +
# Add a geom_histogram to the plot and position it using "dodge"
geom_histogram(position = "dodge") +
# Add labels to the plot
labs(title = "Survival Rate by Age", x = "Age", y = "Number of Passengers")
# Create a ggplot object using titanic_data as data, Sex as x-axis, and Survived as fill factor
ggplot(data = titanic_data, aes(x = Sex, fill = factor(Survived))) +
# Add a geom_bar layer with position set to "dodge"
geom_bar(position = "dodge") +
# Add labels to the graph
labs(title = "Survival Rate by Gender", x = "Gender", y = "Number of Passengers")
#Visualizing the survival rate by fare
ggplot(data = titanic_data, aes(x = Fare, fill = factor(Survived))) +
geom_histogram(position = "dodge") +
labs(title = "Survival Rate by Fare", x = "Fare", y = "Number of Passengers")
# Create a ggplot object using titanic_data as the data
ggplot(data = titanic_data, aes(x = Fare, fill = factor(Survived))) +
# Create a histogram, side-by-side for different levels of Survived
geom_histogram(position = "dodge") +
# Add title, x- and y-axis labels
labs(title = "Survival Rate by Fare", x = "Fare", y = "Number of Passengers")
# Set working environment
setwd("C:/Users/ben/Downloads/Week-1-R/Week-1/Assignment-a")
#Load the titanic dataset
titanic_data <- read.csv("titanic.csv")
#View the dataset
head(titanic_data)
# libraries needed.  Make sure you install them on your system
library(corrplot)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(gtsummary)
library(tidyr)
library(tidyverse)
library(equatiomatic)
library(stargazer)
library(hrbrthemes)
# Only needed if using non-standard fonts
library(showtext)
font_add_google("Oswald", "oswald")
font_add_google("Roboto", "Roboto")
font_add_google("Gochi Hand", "gochi")
font_add_google("Montserrat Alternates", "montse")
trace(grDevices::png, exit = quote({
showtext::showtext_begin()
}), print = FALSE)
showtext_auto()
# _____________________________________________________
# _____________________________________________________
# The data
library(palmerpenguins)
glimpse(penguins)
View(penguins)
# load tidyverse library
library(tidyverse)
# load mtcars dataset
data(mtcars)
# convert mtcars dataset as tibble and store it in mtcarsTib object
mtcarsTib <- as_tibble(mtcars)
# view the summary of mtcarsTib object
summary(mtcarsTib)
# Removing columns 7 and 8 from mtcarsTib (using column names)
select(mtcarsTib, c(-qsec, -vs))
# or
# Removing columns 7 and 8 from mtcarsTib (using indexes)
select(mtcarsTib, c(-7, -8))
# Filter the data frame "mtcarsTib" by excluding observations with 8 cylinders
filter(mtcarsTib, cyl != 8)
mtcarsTib %>%
# group by gear
group_by(gear) %>%
# Summarize the dataset to find the median mpg and disp
summarize(mpgMed = median(mpg), dispMed = median(disp)) %>%
# Create a new column called mpgOverDisp which is the ratio of mpgMed and dispMed
mutate(mpgOverDisp = mpgMed / dispMed)
# Create a ggplot object with mtcarsTib dataset, mapping drat and wt to the x and y axis
# respectively and colour according to carb
ggplot(mtcarsTib, aes(drat, wt, col = carb)) +
# Add a geom_point layer to the plot
geom_point()
# Create a ggplot object with mtcarsTib dataset, mapping drat and wt to the x and y axis
#respectively and colour according to carb
ggplot(mtcarsTib, aes(drat, wt, col = as.factor(carb))) +
# Add a geom_point layer to the plot
geom_point()
# First, gather columns from mtcarsTib into key-value pair format
mtcarsTib_gather <- gather(mtcarsTib,
# Next line specify the column to store variable names as "variable"
key = "variable",
# Next line specify the column to store values as "value"
value = "value",
# last line specify columns to gather
c(vs, am, gear, carb))
# or
gather(mtcarsTib, key = "variable", value = "value", c(8:11))
# First, gather columns from mtcarsTib into key-value pair format
mtcarsTib_gather <- gather(mtcarsTib,
# Next line specify the column to store variable names as "variable"
key = "variable",
# Next line specify the column to store values as "value"
value = "value",
# last line specify columns to gather
c(vs, am, gear, carb))
# or
gather(mtcarsTib, key = "variable", value = "value", c(8:11))
#Apply the map_lgl function to the mtcars data frame
map_lgl(mtcars, ~sum(.) > 1000)
# or
map_lgl(mtcars, function(.) sum(.) > 1000)
#Apply the map_lgl function to the mtcars data frame
map_lgl(mtcars, ~sum(.) > 1000)
# or
map_lgl(mtcars, function(.) sum(.) > 1000)
setwd("C:Users/ben/Downloads")
setwd("C:/Users/ben/Downloads")
#Load the required packages
library(dplyr)
library(ggplot2)
#Load the titanic dataset
handwriting <- read.csv("handwriting.csv")
#View the dataset
head(handwriting)
#Load the required packages
library(dplyr)
library(ggplot2)
#Load the titanic dataset
data <- read.csv("handwriting.csv")
#View the dataset
head(data)
#Calculating Average of Each Variable for Male and Female
data_m <- subset(data, gender == "male")
data_f <- subset(data, gender == "female")
avg_m <- apply(data_m[,-7], 2, mean)
avg_f <- apply(data_f[,-7], 2, mean)
#Creating Data Frame of the Averages
avg_m <- as.data.frame(avg_m)
avg_f <- as.data.frame(avg_f)
avg <- data.frame(avg_m, avg_f)
#Creating Data Frame of the Averages
avg_m <- as.data.frame(avg_m)
avg_f <- as.data.frame(avg_f)
avg <- data.frame(avg_m, avg_f)
#Creating Barplot to Compare Male and Female
barplot(avg, col = c("blue","red"),
legend = c("Male","Female"),
main = "Average of Variables for Male and Female",
ylab = "Average Value")
# Generate a plot to visualize the relationship between gender and size
ggplot(data=df, aes(x=gender, y=size)) +
geom_boxplot(fill="darkblue") +
geom_jitter(color="black", size=1.5) +
ggtitle("Size vs Gender")
# Generate a plot to visualize the relationship between gender and size
ggplot(data=data, aes(x=gender, y=size)) +
geom_boxplot(fill="darkblue") +
geom_jitter(color="black", size=1.5) +
ggtitle("Size vs Gender")
# Generate a plot to visualize the relationship between gender and lines
ggplot(data=df, aes(x=gender, y=lines)) +
geom_boxplot(fill="darkblue") +
geom_jitter(color="black", size=1.5) +
ggtitle("Lines vs Gender")
# Generate a plot to visualize the relationship between gender and lines
ggplot(data=data, aes(x=gender, y=lines)) +
geom_boxplot(fill="darkblue") +
geom_jitter(color="black", size=1.5) +
ggtitle("Lines vs Gender")
# Generate a plot to visualize the relationship between gender and speed
ggplot(data=data, aes(x=gender, y=speed)) +
geom_boxplot(fill="darkblue") +
geom_jitter(color="black", size=1.5) +
ggtitle("Speed vs Gender")
# Generate a plot to visualize the relationship between gender and consistency
ggplot(data=data, aes(x=gender, y=consistency)) +
geom_boxplot(fill="darkblue") +
geom_jitter(color="black", size=1.5) +
ggtitle("Consistency vs Gender")
# Generate a plot to visualize the relationship between gender and corrections
ggplot(data=data, aes(x=gender, y=corrections)) +
geom_boxplot(fill="darkblue") +
geom_jitter(color="black", size=1.5) +
ggtitle("Corrections vs Gender")
# Analyze the data
size <- t.test(data$size ~ data$gender)
shape <- t.test(data$shape ~ data$gender)
# Analyze the data
size <- t.test(data$size ~ data$gender)
lines <- t.test(data$lines ~ data$gender)
speed <- t.test(data$speed ~ data$gender)
consistency <- t.test(data$consistency ~ data$gender)
corrections <- t.test(data$corrections ~ data$gender)
# Print the results
print(size)
print(shape)
# Analyze the data
size <- t.test(data$size ~ data$gender)
lines <- t.test(data$lines ~ data$gender)
speed <- t.test(data$speed ~ data$gender)
consistency <- t.test(data$consistency ~ data$gender)
corrections <- t.test(data$corrections ~ data$gender)
# Print the results
print(size)
print(lines)
print(speed)
print(consistency)
print(corrections)
